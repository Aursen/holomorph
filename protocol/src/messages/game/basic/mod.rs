use std::io::{Read, Write};
use std::io::Result;
use protocol::*;
 use variants::AbstractSocialGroupInfosVariant;
impl_type!(BasicAckMessage, 6362, seq| VarInt, last_packet_id| VarShort);
impl_type!(BasicDateMessage, 177, day| i8, month| i8, year| i16);
impl_type!(BasicLatencyStatsMessage, 5663, latency| i16, sample_count| VarShort, max| VarShort);
impl_type!(BasicLatencyStatsRequestMessage, 5816);
impl_type!(BasicNoOperationMessage, 176);
impl_type!(BasicTimeMessage, 175, timestamp| f64, timezone_offset| i16);
impl_type!(BasicWhoAmIRequestMessage, 5664, verbose| bool);
impl_type!(BasicWhoIsMessage, 180, self_| Flag, verbose| Flag, position| i8, account_nickname| String, account_id| i32, player_name| String, player_id| VarLong, area_id| i16, social_groups| Vec<AbstractSocialGroupInfosVariant>, player_state| i8);
impl_type!(BasicWhoIsNoMatchMessage, 179, search| String);
impl_type!(BasicWhoIsRequestMessage, 181, verbose| bool, search| String);
impl_type!(CurrentServerStatusUpdateMessage, 6525, status| i8);
impl_type!(NumericWhoIsMessage, 6297, player_id| VarLong, account_id| i32);
impl_type!(NumericWhoIsRequestMessage, 6298, player_id| VarLong);
impl_type!(SequenceNumberMessage, 6317, number| i16);
impl_type!(SequenceNumberRequestMessage, 6316);
impl_type!(TextInformationMessage, 780, msg_type| i8, msg_id| VarShort, parameters| Vec<String>);
